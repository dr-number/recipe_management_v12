"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path



# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = os.environ["SECRET_KEY"]
DEBUG = int(os.getenv("DEBUG", 0))

IS_SEND_TO_DEBUG_EMAILS = int(os.getenv("IS_SEND_TO_DEBUG_EMAILS", "0"))
DEBUG_EMAILS = os.getenv('DEBUG_EMAILS', '').split()
DEBUG_EMAIL = os.getenv("DEBUG_EMAIL", "")

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1 localhost db").split(" ")

PROTOCOL = os.getenv("PROTOCOL", 'http')
SITE_DOMAIN = os.environ["SITE_DOMAIN"]
CSRF_TRUSTED_ORIGINS = [] + ([f'{PROTOCOL}://{SITE_DOMAIN}', f'{PROTOCOL}://{SITE_DOMAIN}:8000'] if SITE_DOMAIN else [])
CORS_ALLOWED_ORIGINS = os.environ["CORS_ALLOWED_ORIGINS"].split(" ")

# SESSION_ENGINE для payment_data payselection
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600 # время жизни сессии (в секундах)

IS_LOG_CRITICAL_DATA_PAYMENTS_SYSTEMS = int(os.getenv("IS_LOG_CRITICAL_DATA_PAYMENTS_SYSTEMS", "0"))

if DEBUG:
    CORS_ALLOW_CREDENTIALS = True
    CORS_ORIGIN_ALLOW_ALL = True
    CSRF_TRUSTED_ORIGINS += [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
        'http://127.0.0.1:8001',
        'http://localhost:8001'
    ]
else:
    CORS_ALLOW_CREDENTIALS = False
    CORS_ORIGIN_ALLOW_ALL = False
    SESSION_COOKIE_SECURE = True  # только HTTPS
    SESSION_COOKIE_HTTPONLY = True  # защита от XSS
    # SECURE_SSL_REDIRECT = True #TODO Redirect вызывает проблемы со фронтом
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    CSRF_COOKIE_SECURE = True #to avoid transmitting the CSRF cookie over HTTP accidentally.
    SESSION_COOKIE_SECURE = True #to avoid transmitting the session cookie over HTTP accidentally.
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    CSRF_REFERRER_CHECK = True
    CORS_ALLOW_ALL_ORIGINS = False
    # SECURE_HSTS_SECONDS = 86400  # 1 day
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True
    

AUTH_USER_MODEL = 'main.User'


INSTALLED_APPS = [
    'main',
    # 'payments',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'django.contrib.sessions',
    'django.contrib.messages',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_celery_beat',
    'django_extensions',
    'drf_yasg',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    import os  # only if you haven't already imported this
    import socket  # only if you haven't already imported this

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]


ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ] #,
            # 'libraries':{
                # 'functions_mail':  'main.templatetags.functions_mail',
                # 'functions_html':  'main.templatetags.functions_html',
            # }
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'
ASGI_APPLICATION = 'app.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ["SQL_ENGINE"],
        "NAME": os.environ["SQL_DATABASE"],
        "USER": os.environ["SQL_USER"],
        "PASSWORD": os.environ["SQL_PASSWORD"],
        "HOST": os.environ["SQL_HOST"],
        "PORT": os.environ["SQL_PORT"],
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

STATIC_URL = 'static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "staticfiles"),
)
STATIC_ROOT = os.path.join(BASE_DIR, "static")

'''
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'app.logging_handlers.TelegramFileHandler',
            'formatter': 'file',
            'filename': 'logs/errors.log',
        },
        'file_payment': {
            'level': 'ERROR',
            'class': 'app.logging_handlers.TelegramFileHandler',
            'formatter': 'file',
            'filename': 'logs/payment-errors.log',
        },
        'file_webhook_logs': {
            'level': 'ERROR',
            'class': 'app.logging_handlers.TelegramFileHandler',
            'formatter': 'file',
            'filename': 'logs/webhooks.log',
        },
        'file_celery_logs': {
            'level': 'ERROR',
            'class': 'app.logging_handlers.TelegramFileHandler',
            'formatter': 'file',
            'filename': 'logs/celery.log',
        },
        'requests': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'file',
            'filename': 'logs/requests.log',
        },
    },
    'loggers': {
        '': {
            'level': 'ERROR',
            'handlers': ['file']
        },
        'celery': {
            'level': 'ERROR',
            'handlers': ['file_celery_logs'],
            'propagate': False,
        },
        'payment': {
            'level': 'ERROR',
            'handlers': ['file_payment'],
            'propagate': False,
        },
        'webhook': {
            'level': 'ERROR',
            'handlers': ['file_webhook_logs'],
            'propagate': False,
        },
        'requests': {
            'level': 'INFO',
            'handlers': ['requests'],
        }
    },
}
'''

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# SHELL_PLUS NOTEBOOK
SHELL_PLUS = "ipython"
# SHELL_PLUS_PRINT_SQL = True
NOTEBOOK_ARGUMENTS = [
    "--ip",
    "0.0.0.0",
    "--port",
    "8888",
    "--allow-root",
    "--no-browser",
]

SHELL_PLUS_IMPORTS = [
    'from users.core import *',
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'EXCEPTION_HANDLER': 'app.helpers.custom_exception_handler'
}
IPYTHON_ARGUMENTS = ["--ext", "django_extensions.management.notebook_extension"]
IPYTHON_KERNEL_DISPLAY_NAME = "Django Shell-Plus"

DJANGO_ALLOW_ASYNC_UNSAFE = DEBUG # only use in development

# TELEGRAM BOT
BOT_TOKEN = os.environ['BOT_TOKEN']
FEEDBACK_BOT_TOKEN = os.environ['FEEDBACK_BOT_TOKEN']
TAG_ASK_QUESTION = '#autopilot_ask_question'
TAG_REPORT_USER = '#autopilot_report_user'
TAG_REPORT_WAITING_MANUAL_VERIFICATION = '#autopilot_report_waiting_manual_verification'
TAG_NOT_ALLOW_TRADE_USER = '#autopilot_not_allow_trade_user'
TAG_REPORT_CUSTOM_DOCUMENT = '#autopilot_report_custom_document'
ERRORS_CHAT_ID = os.environ['ERRORS_CHAT_ID']
MESSAGES_CHAT_ID = os.environ['MESSAGES_CHAT_ID']
MESSAGES_CHAT_ID_FOR_DEBUG_MESSAGES_CODE = os.getenv('MESSAGES_CHAT_FOR_DEBUG_MESSAGES_CODE', '') 

# MAIL
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_PORT = os.environ['EMAIL_PORT']
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
EMAIL_USE_TLS = int(os.environ['EMAIL_USE_TLS'])

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://redis:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
USER_AGENTS_CACHE = 'default'

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

CELERY_BEAT_SCHEDULER='django_celery_beat.schedulers:DatabaseScheduler'
REDIS_URL = os.environ['REDIS_HOST']
REDIS_PORT = os.environ['REDIS_PORT']

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_BROKER_URL = os.environ['REDIS_HOST']
CELERY_BACKEND_URL = os.environ['REDIS_HOST']
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = os.getenv('TIMEZONE')
CELERY_RESULT_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = os.environ['REDIS_HOST'] + '/0'
CELERY_RESULT_EXPIRES = 60

BROKER_URL = os.environ['REDIS_HOST']
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("redis", 6379)],
        },
    },
}



